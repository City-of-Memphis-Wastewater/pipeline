name: Python Environment Setup

version: "1.1"

env:
  APP_NAME: "pipeline-eds"

# OS-specific system dependencies
os_dependencies:
  alpine: 
    - "apk add py3-cryptography"
  termux:
    - rust
    - python-numpy
  linux:
    - build-essential
    - libssl-dev
  macos:
    - openssl
    - readline
  windows:
    - "choco install openssl"
    - "choco install git"

steps:
  - name: Display Environment Info
    run: |
      echo "Setting up Python ${{ env.PYTHON_VERSION }}"
      python --version
      echo "OS Type: $OSTYPE" # not good enough, not known to all systems

  - name: Install OS Packages
    run: |
      if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        sudo apt-get update && sudo apt-get install -y ${os_dependencies.linux[*]}
      elif [[ "$OSTYPE" == "darwin"* ]]; then
        brew install ${os_dependencies.macos[*]}
      else
        for pkg in ${os_dependencies.windows[*]}; do
          $pkg
        done
      fi

  - name: Setup Python Environment
    run: |
      if command -v poetry &> /dev/null; then
        echo "Poetry detected — using pyproject.toml for dependency management"
        poetry install
      else
        echo "Poetry not found — falling back to virtual environment + requirements.txt"
        python -m venv .venv
        source .venv/bin/activate
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        else
          echo "No requirements.txt found!"
          exit 1
        fi
      fi

  - name: Run Application
    run: |
      if command -v poetry &> /dev/null; then
        poetry run python -m ${env.APP_NAME}
      else
        source .venv/bin/activate
        python -m ${env.APP_NAME}
      fi