# Use a slim Python 3.11 base image to keep the container small.
FROM python:3.11-slim

# Set the working directory inside the container.
WORKDIR /app

# Install bash (optional, for interactive shell)
RUN apt-get update && apt-get install -y bash curl \
    && rm -rf /var/lib/apt/lists/*
	
# Copy everything
COPY . .

# Install Poetry in the container.
RUN pip install poetry

# Use Poetry to install all project dependencies and the project itself.
# This creates an editable install, making the 'pipeline' module available.
RUN poetry install --no-interaction --no-ansi

# Expose any ports your application might need (e.g., for the Plotly web server).
EXPOSE 8000

# Set the entry point for the container.
# This defines the command that will run when the container starts.
# It uses the "eds" alias from your pyproject.toml file.
ENTRYPOINT ["poetry", "run", "eds"]

# Optional: allow overriding with interactive bash
# Usage: docker run -it --rm --entrypoint bash pipeline-eds
CMD ["--help"]

# Make the container available as a GitHub Package
LABEL org.opencontainers.image.source https://github.com/city-of-memphis-wastewater/pipeline